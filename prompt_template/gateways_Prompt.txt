bpmn_gateways = """
### Exclusive Gateways (XOR)
- **Definition**: Used to model decision points where only one of the available paths can be taken (either/or decision).
- **Textual Clues**: Look for "if", "only if", "either", "exclusive", "else", "depending on", "in case of", "should", "must", "when", etc.

#### XOR Split (Divergence)
- **Behavior**: Checks all conditions for each path. Only one path is taken based on the condition.
- **Example**:
  - **Text**: "If the credit is approved, process the payment. Else, send a rejection notice."
  - **Model**:
    - Gateway: XOR_CreditApproved?
    - Path 1: Yes → Task: Process payment
    - Path 2: No → Task: Send rejection notice

#### XOR Join (Convergence)
- **Behavior**: Waits for one active path to arrive before moving forward. No synchronization required. Sometimes you need to infer this behavior from the context if explicit clues are not present.
- **Example**:
  - **Text**: "Notify the customer after the order is either approved or rejected."
  - **Model**:
    - Gateway: XOR_OrderOutcome?
    - Path 1: Approved → Task: Notify customer
    - Path 2: Rejected → Task: Notify customer

### Inclusive Gateways (OR)
- **Definition**: Allows multiple paths to be taken simultaneously based on conditions (one or more paths can be chosen).
- **Textual Clues**: Look for "optionally", "can", "might", "inclusive", "and/or", "one or more", "any of", "possibly", "choose", "elect", etc.

#### OR Split (Divergence)
- **Behavior**: Checks conditions for each path. Multiple paths with true conditions are taken simultaneously.
- **Example**:
  - **Text**: "A customer can choose to receive email notifications, SMS notifications, or both."
  - **Model**:
    - Gateway: OR_NotificationPreferences?
    - Path 1: Email → Task: Send email notification
    - Path 2: SMS → Task: Send SMS notification

#### OR Join (Convergence)
- **Behavior**: Waits for all active paths to arrive before moving forward. Synchronizes all active paths. Sometimes you need to infer this behavior from the context if explicit clues are not present.
- **Example**:
  - **Text**: "After completing email, social media, and direct mail campaigns, analyze the results."
  - **Model**:
    - Gateway: OR_AnalyzeResults?
    - Path 1: Email → Task: Analyze email results
    - Path 2: Social Media → Task: Analyze social media results
    - Path 3: Direct Mail → Task: Analyze direct mail results

### Parallel Gateways (AND)
- **Definition**: Models situations where multiple tasks occur concurrently (all paths are taken simultaneously without conditions).
- **Textual Clues**: Look for "and", "both", "concurrently", "simultaneously", "parallel", "at the same time", "in tandem", "jointly", "while", etc.

#### AND Split (Divergence)
- **Behavior**: Starts all paths at the same time, allowing tasks to be done concurrently.
- **Example**:
  - **Text**: "The system will package and label the order at the same time."
  - **Model**:
    - Gateway: AND_PackageAndLabel
    - Path 1: Task: Package order
    - Path 2: Task: Label order

#### AND Join (Convergence)
- **Behavior**: Waits for all paths to be completed before moving forward. Ensures all tasks are done before proceeding. Sometimes you need to infer this behavior from the context if explicit clues are not present.
- **Example**:
  - **Text**: "Proceed after receiving approvals from both the technical and financial departments."
  - **Model**:
    - Gateway: AND_Approvals
    - Path 1: Task: Technical approval
    - Path 2: Task: Financial approval
"""



#==================

# - XOR can be split (divergence) or join (convergence):
#         - Split Behavior (Choosing Multiple Paths): When you reach this gateway, it checks all the conditions for each path. All paths with true conditions are taken simultaneously. Example: Imagine you are ordering food, and you can choose to get a drink, a side dish, or both. Depending on what you choose, you might get one, both, or none.
#         - Join Behavior (Synchronizing Paths): When paths come together at this gateway, it waits for all active paths to arrive before moving forward. It ensures all conditions are met before proceeding. Example: In the process where a customer places an order that can either be approved or rejected, the process proceeds to notify the customer after either outcome, making it an XOR join as it does not require synchronization.
#     - Modeling Instructions: Provide a question that describes the decision point. Example: XOR_CreditOK? If the condition is met, the flow follows one path; otherwise, it follows a different path.
#     - Example:
#         - Text: "If the credit is approved, process the payment. Else, send a rejection notice."
#         - Model: 
#             - Gateway: XOR_CreditApproved?
#             - Path 1: Yes → Task: Process payment
#             - Path 2: No → Task: Send rejection notice

# - OR can be split (divergence) or join (convergence)::
#         - Split Behavior (Choosing Multiple Paths): When you reach this gateway, it checks all the conditions for each path. All paths with true conditions are taken simultaneously. Example: Imagine you are ordering food, and you can choose to get a drink, a side dish, or both. Depending on what you choose, you might get one, both, or none.
#         - Join Behavior (Synchronizing Paths):When paths come together at this gateway, it waits for all active paths to arrive before moving forward. It ensures all conditions are met before proceeding. Example: In a marketing campaign running through email, social media, and direct mail, the process moves to analyze results once any of these channels complete, requiring synchronization of all active channels, thus making it an OR join.
#     - Modeling Instructions: Provide a question that describes the decision point and clearly describe the conditions for each path. All applicable paths can be activated simultaneously.
#     - Example:
#         - Text: "A customer can choose to receive email notifications, SMS notifications, or both."
#         - Model: 
#             - Gateway: OR_NotificationPreferences?
#             - Path 1: Email → Task: Send email notification
#             - Path 2: SMS → Task: Send SMS notification

# - AND can be split (divergence) or join (convergence)::
#         - Split Behavior (Starting Multiple Tasks):When you reach this gateway, all paths are started at the same time, allowing tasks to be done concurrently. Example: Imagine you need to bake a cake and also make a salad. You start both tasks at the same time and continue with the next step only when both are done.
#         - Join Behavior (Waiting for All Tasks): When paths come together at this gateway, it waits for all paths to be completed before moving forward. It ensures that all tasks are done before proceeding. Example: For a project needing approvals from both the technical and financial departments, the process proceeds only after both departments have approved, necessitating synchronization of both flows, identifying it as an AND join.
#     - Modeling Instructions: State explicitly that tasks are to be performed in parallel.
#     - Example:
#         - Text: "The system will package and label the order at the same time."
#         - Model: 
#             - Gateway: AND_PackageAndLabel
#             - Path 1: Task: Package order
#             - Path 2: Task: Label order

# {
#     "total_number_gateways": "{{number_of_gateways}}",
#     "total_number_XOR_split": "{{number_of_XOR_split}}",
#     "total_number_XOR_join": "{{number_of_XOR_join}}",
#     "total_number_AND_split": "{{number_of_AND_split}}",
#     "total_number_AND_join": "{{number_of_AND_join}}",
#     "total_number_OR_split": "{{number_of_OR_split}}",
#     "total_number_OR_join": "{{number_of_OR_join}}",
#     "gateways": [
#         {
#             "id": "{{gateway_id_1}}",
#             "name": "{{gateway_name_1}}",
#             "type": "{{gateway_type_1}}",
#             "classification": "{{gateway_classification_1}}",
#             "from_node": "{{from_node_1}}",
#             "to_nodes": ["{{to_node_1a}}", "{{to_node_1b}}"]
#         },
#         {
#             "id": "{{gateway_id_2}}",
#             "name": "{{gateway_name_2}}",
#             "type": "{{gateway_type_2}}",
#             "classification": "{{gateway_classification_2}}",
#             "from_node": "{{from_node_2}}",
#             "to_nodes": ["{{to_node_2a}}"]
#         },
#         ...
#     ]
# }

# Detail the keys' meaning:
# id: A unique identifier for the gateway.
# name: A placeholder name for the gateway.
# type: The type of gateway (XOR, AND, OR). Identify based on the textual clues provided above.
# classification: Indicates whether the gateway is a "split" or "join". Determine from the context where the gateway either splits into multiple paths or joins multiple paths.
# from_node/from_nodes: The node(s) preceding the gateway. Identify the element immediately before the gateway.
# to_node/to_nodes: The node(s) following the gateway. Identify the element(s) immediately after the gateway.

# REMEMBER:
# - Typically, a split gateway is accompanied by a join gateway, though this is not always the case. 
# - Do not include any additional text outside of the JSON format. 
# - Refrain from providing any explanatory text after the requested JSON output.



# =================

- There are three types of gateways: Exclusive (XOR), Inclusive (OR), and Parallel (AND). Each gateway type can function as either a split or a join.
- Exclusive Gateways (XOR):
    - Definition: Exclusive Gateways are used to model decision points where only one of the available paths can be taken. This is akin to a simple "either/or" decision.
    - Textual Clues: Look for words and phrases like "if", "only if", "either", "exclusive", "else", "depending on", "in case of", "should", "must", "when", etc.
    - XOR Split (Divergence)
        - Behavior: Checks all conditions for each path. Only one path is taken based on the condition.
        - Example:
            - Text: "If the credit is approved, process the payment. Else, send a rejection notice."
            - Model:
                - Gateway: XOR_CreditApproved?
                - Path 1: Yes → Task: Process payment
                - Path 2: No → Task: Send rejection notice
    XOR Join (Convergence)
        - Behavior: Waits for one active path to arrive before moving forward. No synchronization required. Sometimes you need to infer this behavior from the context if explicit clues are not present. Contextual Clues: Look for sentences that describe actions taken after multiple alternative paths. These sentences often conclude decisions where one of several conditions will be met, and an action will follow regardless of the specific condition.
        - Example:
            - Text: "Notify the customer after the order is either approved or rejected."
            - Model:
                - Gateway: XOR_OrderOutcome?
                - Path 1: Approved → Task: Notify customer
                - Path 2: Rejected → Task: Notify customer

- Inclusive Gateways (OR):
    - Definition: Inclusive Gateways allow for multiple paths to be taken simultaneously. This means that one or more of the available paths can be chosen based on the conditions.
    - Textual Clues: Look for words and phrases like "optionally", "can", "might", "inclusive", "and/or", "one or more", "any of", "possibly", "choose", "elect", etc.
    - OR Split (Divergence)
        - Behavior: Checks conditions for each path. Multiple paths with true conditions are taken simultaneously.
        - Example:
            - Text: "A customer can choose to receive email notifications, SMS notifications, or both."
            - Model:
                - Gateway: OR_NotificationPreferences?
                - Path 1: Email → Task: Send email notification
                - Path 2: SMS → Task: Send SMS notification

    - OR Join (Convergence)
        - Behavior: Waits for all active paths to arrive before moving forward. Synchronizes all active paths. Sometimes you need to infer this behavior from the context if explicit clues are not present. Contextual Clues: Look for descriptions indicating the need to wait for multiple tasks or conditions to be completed before proceeding. These sentences often highlight that multiple branches of activity can happen but must converge before continuing.
        - Example:
            - Text: "After completing email, social media, and direct mail campaigns, analyze the results."
            - Model:
                - Gateway: OR_AnalyzeResults?
                - Path 1: Email → Task: Analyze email results
                - Path 2: Social Media → Task: Analyze social media results
                - Path 3: Direct Mail → Task: Analyze direct mail results

- Parallel Gateways (AND):
    - Definition: Parallel Gateways are used to model situations where multiple tasks occur concurrently. This means that all paths are taken simultaneously without any conditions.
    - Textual Clues: Look for words and phrases like "and", "both", "concurrently", "simultaneously", "parallel", "at the same time", "in tandem", "jointly", "while", etc.
    - AND Split (Divergence)
        - Behavior: Starts all paths at the same time, allowing tasks to be done concurrently.
        - Example:
            - Text: "The system will package and label the order at the same time."
            - Model:
                - Gateway: AND_PackageAndLabel
                - Path 1: Task: Package order
                - Path 2: Task: Label order
    - AND Join (Convergence)
        - Behavior: Waits for all paths to be completed before moving forward. Ensures all tasks are done before proceeding. Sometimes you need to infer this behavior from the context if explicit clues are not present. Contextual Clues: Look for descriptions where multiple parallel tasks or conditions need to be completed before a subsequent action can be taken. These sentences often indicate simultaneous activities that must all be finished before the process can proceed.
        - Example:
            - Text: "Proceed after receiving approvals from both the technical and financial departments."
            - Model:
                - Gateway: AND_Approvals
                - Path 1: Task: Technical approval
                - Path 2: Task: Financial approval